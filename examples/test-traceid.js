#!/usr/bin/env node

/**
 * Test client-provided traceId functionality
 */

import { Queen } from '../src/client/client.js';
import crypto from 'crypto';

// Helper to generate a valid UUID v4
function generateUUID() {
  return crypto.randomUUID();
}

async function main() {
  console.log('🧪 Testing Client-Provided TraceId\n');
  
  const client = new Queen({
    baseUrls: ['http://localhost:6632'],
    timeout: 30000
  });
  
  try {
    // Configure test queue
    await client.queue('trace-test', {
      leaseTime: 300,
      retryLimit: 3
    });
    
    // Test 1: Push with valid UUID traceId
    console.log('1️⃣ Testing valid UUID traceId...');
    const validTraceId = generateUUID();
    console.log(`   Generated UUID: ${validTraceId}`);
    
    await client.push('trace-test', {
      message: 'Test with valid traceId'
    }, {
      transactionId: 'txn-001',
      traceId: validTraceId
    });
    console.log('✅ Message pushed with valid traceId\n');
    
    // Test 2: Push with invalid traceId (should be ignored)
    console.log('2️⃣ Testing invalid traceId (should be ignored)...');
    const invalidTraceId = 'not-a-valid-uuid';
    console.log(`   Invalid traceId: ${invalidTraceId}`);
    
    await client.push('trace-test', {
      message: 'Test with invalid traceId'
    }, {
      transactionId: 'txn-002',
      traceId: invalidTraceId  // Will be ignored, server will generate one
    });
    console.log('✅ Message pushed (invalid traceId ignored)\n');
    
    // Test 3: Push without traceId (server generates)
    console.log('3️⃣ Testing without traceId (server generates)...');
    await client.push('trace-test', {
      message: 'Test without traceId'
    }, {
      transactionId: 'txn-003'
    });
    console.log('✅ Message pushed (server generated traceId)\n');
    
    // Test 4: Using special properties format
    console.log('4️⃣ Testing special properties format...');
    const anotherValidTraceId = generateUUID();
    
    await client.push('trace-test', {
      _payload: { message: 'Special format test' },
      _transactionId: 'txn-004',
      _traceId: anotherValidTraceId
    });
    console.log('✅ Message pushed with special format\n');
    
    // Test 5: Batch with mixed traceIds
    console.log('5️⃣ Testing batch with mixed traceIds...');
    const batchTraceId1 = generateUUID();
    const batchTraceId2 = generateUUID();
    
    await client.push('trace-test', [
      {
        message: 'Batch message 1',
        transactionId: 'batch-001',
        traceId: batchTraceId1  // Valid UUID
      },
      {
        message: 'Batch message 2',
        transactionId: 'batch-002',
        traceId: 'invalid-trace'  // Invalid, will be ignored
      },
      {
        message: 'Batch message 3',
        transactionId: 'batch-003'
        // No traceId, server will generate
      }
    ]);
    console.log('✅ Batch pushed with mixed traceId scenarios\n');
    
    // Retrieve and display messages
    console.log('📥 Retrieving messages to verify traceIds...\n');
    let count = 0;
    for await (const msg of client.take('trace-test', { limit: 7 })) {
      count++;
      console.log(`Message ${count}:`);
      console.log(`  Transaction ID: ${msg.transactionId}`);
      console.log(`  Trace ID: ${msg.traceId}`);
      console.log(`  Data: ${JSON.stringify(msg.data)}`);
      
      // Check if our valid traceIds were preserved
      if (msg.transactionId === 'txn-001') {
        if (msg.traceId === validTraceId) {
          console.log('  ✅ Client-provided traceId was preserved!');
        } else {
          console.log('  ❌ Client-provided traceId was not preserved');
        }
      }
      
      if (msg.transactionId === 'txn-002') {
        if (msg.traceId !== invalidTraceId) {
          console.log('  ✅ Invalid traceId was correctly replaced');
        }
      }
      
      await client.ack(msg);
      console.log('');
    }
    
    console.log('🎉 TraceId test completed successfully!');
    console.log('\nSummary:');
    console.log('- Valid UUID traceIds are accepted and preserved');
    console.log('- Invalid traceIds are ignored (server generates new ones)');
    console.log('- Missing traceIds are auto-generated by server');
    
  } catch (error) {
    console.error('❌ Test failed:', error.message);
    process.exit(1);
  } finally {
    await client.close();
  }
}

// Run test
main().catch(error => {
  console.error('Fatal error:', error);
  process.exit(1);
});
